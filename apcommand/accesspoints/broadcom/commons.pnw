The Broadcom Commons
====================
.. currentmodule:: apcommand.accesspoints.broadcom.commons

To prevent circular imports common methods, functions, and constants are put in here (or maybe they are put in here to prevent circular imports, whichever you prefer).

<<name='imports', echo=False>>=
# python standard library
import time
@
Constants
---------

Some of the constants are gathered into a class in order to try and make it easier to understand what they refer to. In particular the data names and values (e.g. 'wl_unit' and '0') are grouped by page.

<<name='constants', wrap=False>>=
ZERO = '0'
ONE = '1'

SSID_PAGE = 'ssid.asp'
SSID = 'wl_ssid'
@

BandEnum
--------

This is to try and make how 2.4 ghz is specified more consistent.

.. uml::

   BandEnumeration : two_point_four
   BandEnumeration : five

<<name='BandEnumeration', echo=False>>=
class BandEnumeration(object):
    __slots__ = ()
    two_point_four = '2.4'
    five = '5'
    both = 'both'
@

BroadcomRadioData
~~~~~~~~~~~~~~~~~

This holds constants for the radio.asp page.

.. uml::

   BroadcomRadioData : channels_24ghz
   BroadcomRadioData : channels_5ghz
   BroadcomRadioData : interface
   BroadcomRadioData : radio_page
   BroadcomRadioData : radio_on
   BroadcomRadioData : radio_off
   BroadcomRadioData : control_channel

<<name='BroadcomRadioData', echo=False>>=
class BroadcomRadioData(object):
    """
    A holder of constants for setting or checking the channel
    """
    __slots__ = ()
    channels_5ghz =  '36 44 149 157'.split()
    channels_24ghz = [str(channel) for channel in xrange(1,12)]
    radio_page = 'radio.asp'
    interface = 'wl_radio'
    radio_off = ZERO
    radio_on = ONE
    control_channel = 'wl_channel'
    sideband = 'wl_nctrlsb'
# end BroadcomRadioData
@

BroadcomLANData
~~~~~~~~~~~~~~~

This is data for the ``lan.asp`` page.

.. uml::

   BroadcomLANData : lan_page

<<name='BroadcomLANData', wrap=False>>=
class BroadcomLANData(object):
    __slots__ = ()
    lan_page = 'lan.asp'
@

BroadcomWirelessData
~~~~~~~~~~~~~~~~~~~~

This holds settings for the `Wireless Interface` drop-down which decides which interface will be affected by changed settings. It is used on several pages so I pulled it out by itself.

.. uml::

    BroadcomWirelessData : wireless_interface
    BroadcomWirelessData : interface_5_ghz
    BroadcomWirelessData : interface_24_ghz

<<name='BroadcomWirelessData', echo=False>>=
class BroadcomWirelessData(object):
    """
    A holder of data for the `Wireless Interface`
    """
    __slots__ = ()
    wireless_interface = 'wl_unit'
    interface_5_ghz = ONE
    interface_24_ghz = ZERO

# this is a map between the band-name (e.g. '2.4') and its wl_unit number (e.g. '0')
BAND_INTERFACE_MAP = {BandEnumeration.two_point_four:BroadcomWirelessData.interface_24_ghz,
                      '2':BroadcomWirelessData.interface_24_ghz,
                      BandEnumeration.five:BroadcomWirelessData.interface_5_ghz}
@

BroadcomPages
-------------

A holder of names of the web-pages.

.. uml::

   BroadcomPages : radio
   BroadcomPages : lan
   BroadcomPages : ssid
   BroadcomPages : firmware
   BroadcomPages : security

<<name='BroadcomPages', echo=False>>=
class BroadcomPages(object):
    """
    Holds the names of the web pages
    """
    __slots__ = ()
    radio = 'radio.asp'
    lan = 'lan.asp'
    ssid = 'ssid.asp'
    firmware = 'firmware.asp'
    security = 'security.asp'
    
@

Decorators
----------

These are decorators to do the repetitive calls common to many methods.

.. autosummary::
   :toctree: api

   radio_page
   ssid_page

<<name='decorators', wrap=False>>=
# a decorator to set the page to 'radio.asp'
def radio_page(method):
    """
    Decorator: sets connection.path to radio.asp before, sleeps after
    """
    def _method(self, *args, **kwargs):
        self.logger.debug("Setting connection.path to '{0}'".format(BroadcomRadioData.radio_page))
        self.connection.path = BroadcomRadioData.radio_page
        outcome = method(self, *args, **kwargs)
        return outcome
    return _method

# a decorator to set the page to 'ssid.asp'
def ssid_page(method):
    """
    Decorator: sets connection.path to ssid.page before, sleeps after
    """
    def _method(self, *args, **kwargs):
        self.logger.debug("Setting connection.path to {0}".format(SSID_PAGE))
        self.connection.path = SSID_PAGE
        outcome = method(self, *args, **kwargs)
        return outcome
    return _method

# a decorator to set the page assuming that the object has a self.asp_page attribute
def set_page(method):
    """
    Decorator: sets connection.path to self.asp_page before, sleeps after
    """
    def _method(self, *args, **kwargs):
        self.logger.debug("Setting connection.path to {0}".format(self.asp_page))
        self.connection.path = self.asp_page
        outcome = method(self, *args, **kwargs)
        return outcome
    return _method

@

Data
----

<<name='dictionary_creators', echo=False>>=
# a dictionary for data that changes the state of the broadcom
action_dict = lambda: {'action':'Apply'}

def set_24_data():
    """
    return data dictionary to set 2.4 GHz channel
    """
    data = BroadcomWirelessData
    set_data = action_dict()
    set_data[data.wireless_interface] = data.interface_24_ghz
    return set_data

def set_5_data():
    """
    return data dictionary to set 5 GHz channel
    """
    data = BroadcomWirelessData
    set_data = action_dict()
    set_data[data.wireless_interface] = data.interface_5_ghz
    return set_data
@

Errors
------

.. autosummary::
   :toctree: api

   BroadcomError

<<name='BroadcomError', echo=False>>=
class BroadcomError(RuntimeError):
    "An Error to raise by broadcom classes"
@


