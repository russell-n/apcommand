The Broadcom BCM94718NR Access Point
====================================
.. currentmodule:: apcommand.accesspoints.broadcom.broadcom

The Broadcom advertises a telnet connection but it will not let you log in. To control it you will need to send commands to its web-page. Although something like `Selenium <http://docs.seleniumhq.org/>`_ should work, to simplify the control for the command line, a more containde method will be used. Aren used `curl <http://en.wikipedia.org/wiki/CURL>`_ to send commands to the Access Point.

Using `curl` introduces two problems:

   * Most distributions do not come with `curl` installed (not a big problem for linux/unix systems)

   * We now have an indirect communication to the access point, as the python code has to talk to a machine that talks to the access point


.. digraph:: curl_topology

   C -> V -> A

Where `C` is the `Control PC`, `V` is a `Ventriloquist PC` that uses `curl` to talk to `A`, the `Broadcom Access Point`. In the simplest case the Control PC could fork a sub-process or talk to its `localhost`:

.. digraph:: curl_back_topology

   C -> C
   C -> A

Still, the use of `curl` seems inelegant, so I will attempt to do it with the python standard library module `urllib2` and related modules.

.. note:: Right now I am trying out `requests <http://docs.python-requests.org/en/latest/>`_ (a replacement for `urllib2`) and `BeautifulSoup <http://www.crummy.com/software/BeautifulSoup/>`_ with regular expressions to read the html output.

.. note:: The broadcom needs time between calls -- if you try to access the web server too soon after a previous call to it might not respond or not respond correctly.

The BroadcomBCM94718NR (Henceforth to be known as 'George')
-----------------------------------------------------------

.. uml::

   BroadcomBCM94718NR -|> BaseClass
   BroadcomBCM94718NR o- HTTPConnection
   BroadcomBCM94718NR o- BroadcomChannelChanger

.. autosummary::
   :toctree: api

   BroadcomBCM94718NR
   BroadcomBCM94718NR.set_channel
   BroadcomBCM94718NR.get_channel
   BroadcomBCM94718NR.set_5_ssid
   BroadcomBCM94718NR.set_24_ssid
   
* See the :ref:`HTTPConnection <http-connection>` page for more on what it is about.

<<name='imports', echo=False>>=
# python standard library
import time

# this package
from apcommand.baseclass import BaseClass
import apcommand.connections.httpconnection as httpconnection

from commons import BroadcomRadioData
from commons import SSID, SSID_PAGE
from commons import set_24_data, set_5_data, ssid_page
from querier import BroadcomRadioQuerier, BroadcomSSIDQuerier
from macros import ChannelChanger

# for some reason Pweave sometimes accepts relative paths, sometimes not
from apcommand.accesspoints.broadcom.commands import DisableInterface
from apcommand.accesspoints.broadcom.commands import EnableInterface
@

.. autosummary::
   :toctree: api

   radio_page
   ssid_page
   action_dict
   set_24_data
   set_5_data
   

.. autosummary::
   :toctree: api

   RadioPageConnection


<<name='PageConnections', echo=False>>=
class RadioPageConnection(BaseClass):
    """
    A context manager for connecting to the radio.asp page
    """
    def __init__(self, connection, sleep=0.5):
        """
        RadioPageConnection constructor

        :param:

         - `connection`: Connection to the broadcom
         - `sleep`: Time to sleep before exiting
        """
        super(RadioPageConnection, self).__init__()
        self.connection = connection
        self.sleep = sleep
        return

    def __enter__(self):
        """
        Sets the path and returns the connection
        """
        self.logger.debug('Setting the connection.path to "{0}"'.format(BroadcomRadioData.radio_page))
        self.connection.path = BroadcomRadioData.radio_page
        return self.connection

    def __exit__(self, type, value, traceback):
        self.logger.debug('Sleeping for {0} seconds'.format(self.sleep))
        time.sleep(self.sleep)
        return
# end RadioPageConnection
@
<<name='BroadcomBCM94718NR', echo=False>>=
class BroadcomBCM94718NR(BaseClass):
    """
    A class to control and query the Broadcom BCM94718NR
    """
    def __init__(self, hostname='192.168.1.1', username='',
                 password='admin', sleep=0.1):
        """
        BroadcomBCM94718NR Constructor

        :param:

         - `hostname`: address of the AP
         - `username`: login username (use empty string if none)
         - `password`: login password (use empty string if none)
         - `sleep`: seconds to sleep after a call to the web server
        """
        super(BroadcomBCM94718NR, self).__init__()
        self.hostname = hostname
        self.username = username
        self.password = password
        self.sleep = sleep
        self._connection = None
        self._enable_command = None
        self._disable_command = None

        # aggregated classes
        self._channel_changer = None
        self._query = None
        self._ssid_query = None
        return

    @property
    def disable_command(self):
        """
        A command to disable a wireless interface
        """
        if self._disable_command is None:
            self._disable_command = DisableInterface(connection=self.connection)
        return self._disable_command

    @property
    def enable_command(self):
        """
        a commanad to enable a wireless interface
        """
        if self._enable_command is None:
            self._enable_command = EnableInterface(connection=self.connection)
        return self._enable_command

    @property
    def channel_changer(self):
        """
        A BroadcomChannelChanger
        """
        if self._channel_changer is None:
            self._channel_changer = ChannelChanger(connection=self.connection)
        return self._channel_changer

    @property
    def query(self):
        """
        A Broadcom Querier band:reader dictionary
        """
        if self._query is None:
            self._query = {'2':BroadcomRadioQuerier(connection=self.connection,
                                                    band='5'),
                             '5':BroadcomRadioQuerier(connection=self.connection,
                                                      band='2.4')}
        return self._query

    @property
    def ssid_query(self):
        """
        A Broadcom SSID Querier band:reader dictionary
        """
        if self._query is None:
            self._query = {'2':BroadcomSSIDQuerier(connection=self.connection,
                                                    band='5'),
                             '5':BroadcomSSIDQuerier(connection=self.connection,
                                                      band='2.4')}
        return self._query

    @property
    def connection(self):
        """
        A connection to the AP (right now this acts as an HTTPConnection builder)

        :return: HTTPConnection for the DUT (set to radio.asp pgae)
        """
        if self._connection is None:
            self._connection = httpconnection.HTTPConnection(hostname=self.hostname,
                                                             username=self.username,
                                                             password=self.password,
                                                             rest=self.sleep,
                                                             path=BroadcomRadioData.radio_page)
        return self._connection

    @ssid_page
    def set_5_ssid(self, ssid):
        """
        Sets the 5 Ghz band SSID
        """
        data = set_5_data()
        data[SSID] = ssid
        self.connection(data=data)
        return

    @ssid_page
    def set_24_ssid(self, ssid):
        """
        Sets the 2.4 Ghz band SSID
        """
        data = set_24_data()
        data[SSID] = ssid
        self.connection(data=data)
        return

    def get_ssid(self, band):
        """
        Gets the ssid for the interface matching the band
        """
        return self.ssid_query[band[0]].ssid

    def set_channel(self, channel):
        """
        Sets the wifi channel

        :param:

         - `channel`: wifi channel to set
        """
        self.channel_changer(channel)
        return

    def get_channel(self, band):
        """
        Returns the channel for the given band (uses only first character)
        """
        return self.query[band[0]].channel

    def get_status(self, band):
        """
        Returns an aggregate string for the band
        """
        if band is not 'all':
            channel = "Channel: {0}".format(self.get_channel(band))
            ssid = "SSID: {0}".format(self.get_ssid(band))
            state = "State: {0}".format(self.query[band[0]].state)
            if band.startswith('5'):
                sideband = "Sideband: {0}".format(self.query[band[0]].sideband)
            else:
                sideband = ''
            return '\n'.join((channel, ssid, state, sideband))
        else:
            output = ['2.4 GHz:\n']
            output.append("\tChannel: {0}".format(self.query['2'].channel))
            output.append('\tSSID: {0}'.format(self.query['2'].ssid))
            output.append('\tState: {0}'.format(self.query['2'].state))
            output.append('5 GHz:\n')
            output.append('\tChannel: {0}'.format(self.query['5'].channel))
            output.append('\tSideband: {0}'.format(self.query['5'].sideband))            
            output.append('\tSSID: {0}'.format(self.query['5'].ssid))
            output.append('\tState: {0}'.format(self.query['5'].state))
            return '\n'.join(output)

    def unset_channel(self):
        """
        calls an undo.
        """
        self.channel_changer.undo()
        return

    def disable(self, band):
        """
        Sets the disable command's band and calls it.

        :param:

         - `band`: a wireless band (2.4 or 5)
        """
        self.disable_command.band = band
        self.disable_command()
        return

    def enable(self, band):
        """
        Sets the enable command's band and calls it

        :param:

         - `band`: The band of the interface to enable
        """
        self.enable_command.band = band
        self.enable_command()
        return
# end Class BroadcomBCM94718NR        
@

<<name='test_imports', echo=False>>=
# python standard library
import unittest
import random
import string

# third party
from mock import MagicMock, patch, call
@
<<name='test_helpers', echo=False>>=
EMPTY_STRING = ''
random_letters = lambda: EMPTY_STRING.join([random.choice(string.letters)
                                            for c in xrange(random.randrange(100))])
@
<<name='TestBroadcomBCM94718NR', echo=False>>=
class TestBroadcomBCM94718NR(unittest.TestCase):
    def setUp(self):
        self.hostname = random_letters()
        self.username = random_letters()
        self.password = random_letters()
        self.connection = MagicMock(name='MockHTTPConnection')
        self.control = BroadcomBCM94718NR(hostname=self.hostname,
                                          username=self.username,
                                          password=self.password)
        self.control._connection = self.connection
        return

    def test_defaults(self):
        """
        Do the defaults match the Broadcom's 'reset' values?
        """
        connection = BroadcomBCM94718NR()
        self.assertEqual('192.168.1.1', connection.hostname)
        self.assertEqual('', connection.username)
        self.assertEqual('admin', connection.password)
        return

    def test_constructor(self):
        """
        Does it construct the control correctly?
        """
        self.assertEqual(self.hostname, self.control.hostname)
        self.assertEqual(self.username, self.control.username)
        self.assertEqual(self.password, self.control.password)
        return

    def test_connection(self):
        """
        Does the control build the HTTPConnection?
        """
        connection = MagicMock(name='HTTPConnection')
        control = BroadcomBCM94718NR()
        with patch('apcommand.connections.httpconnection.HTTPConnection', connection):
            print connection.mock_calls
            print control.connection.mock_calls
            # for some reason this isn't working (the patch is created but not called)
            #control.connection.assert_called_with(hostname='192.168.1.1')
            self.assertIsInstance(control.connection, MagicMock)
        return

    def test_set_ssid(self):
        """
        Does the connection get the right data to set the ssid?
        """
        ssid = random_letters()
        with patch('time.sleep'):
            self.control.set_5_ssid(ssid)
        self.assertEqual(self.connection.path, SSID_PAGE)
        calls = [call(data={'wl_unit':'1', 'wl_ssid':ssid, 'action':'Apply'})]
        self.assertEqual(self.connection.mock_calls, calls)

        with patch('time.sleep'):
            self.control.set_24_ssid(ssid)
        calls += [call(data={'wl_unit':'0', 'wl_ssid':ssid, 'action':'Apply'})]
        self.assertEqual(self.connection.mock_calls, calls)
        return

    def test_set_channel(self):
        """
        Does it call the BroadcomChannelChanger?
        """
        channel = random.choice(BroadcomRadioData.channels_5ghz +
                                BroadcomRadioData.channels_24ghz)
        self.control._lock = MagicMock()
        changer = MagicMock()
        self.control._channel_changer = changer
        with patch('time.sleep'):
            self.control.set_channel(channel)
        changer.assert_called_with(channel)
        return
# end class TestBroadcom            
@




<%
for case in (TestBroadcomBCM94718NR, ):
    suite = unittest.TestLoader().loadTestsFromTestCase(case)    
    unittest.TextTestRunner(verbosity=2).run(suite)
%>

