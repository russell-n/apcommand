The Broadcom BCM94718NR Access Point
====================================

The Broadcom advertises a telnet connection but it will not let you log in. To control it you will need to send commands to its web-page. Although something like `Selenium <http://docs.seleniumhq.org/>`_ should work, to simplify the control for the command line, Aren used `curl <http://en.wikipedia.org/wiki/CURL>`_ is used to send commands to the Access Point.

Using `curl` introduces two problems:

   * Most distributions do not come with `curl` installed (not a big problem for linux/unix systems)

   * We now have an indirect communication to the access point, as the python code has to talk to a machine that talks to the access point


.. digraph:: curl_topology

   C -> V -> A

Where `C` is the `Control PC`, `V` is a `Ventriloquist PC` that uses `curl` to talk to `A`, the `Broadcom Access Point`. In the simplest case the Control PC could fork a sub-process or talk to its `localhost`:

.. digraph:: curl_back_topology

   C -> C
   C -> A

Still, the use of `curl` seems inelegant, so I will attempt to do it with the python standard library module `urllib2` and related modules.

.. note:: Right now I am trying out `requests <http://docs.python-requests.org/en/latest/>`_ instead of `urllib2` and `BeautifulSoup <http://www.crummy.com/software/BeautifulSoup/>`_ instead of just regular expressions.

The BroadcomBCM94718NR
----------------------

.. uml::

   BroadcomBCM94718NR -|> BaseClass
   BroadcomBCM94718NR o- HTTPConnection
   BroadcomBCM94718NR o- BroadcomRadioSoup
   BroadcomBCM94718NR : enable_24_ghz
   BroadcomBCM94718NR : enable_5_ghz

<<name='imports', echo=False>>=
# this package
from apcommand.baseclass import BaseClass
@
<<name='BroadcomBCM94718NR', echo=False>>=
class BroadcomBCM94718NR(BaseClass):
    """
    A class to control and query the Broadcom BCM94718NR
    """
    def __init__(self, hostname):
        """
        BroadcomBCM94718NR Constructor

        :param:

         - `hostname`: address of the AP
        """
        self.hostname = hostname
        return
@

<<name='test_imports', echo=False>>=
# python standard library
import unittest
@
<<name='TestBroadcomBCM94718NR', echo=False>>=
class TestBroadcomBCM94718NR(unittest.TestCase):
    def setUp(self):
        self.hostname = '192.168.1.1'
        self.control = BroadcomBCM94718NR(hostname=self.hostname)
        return

    def test_constructor(self):
        """
        Does it construct the control correctly?
        """
        self.assertEqual(self.hostname, self.control.hostname)
        return
    
    def test_enable_24_interface(self):
        """
        Does it enable the 2.4 GHz interface?
        """
        return
    
@
<%
for case in (TestBroadcomBCM94718NR,):
    suite = unittest.TestLoader().loadTestsFromTestCase(case)    
    unittest.TextTestRunner(verbosity=2).run(suite)
%>




