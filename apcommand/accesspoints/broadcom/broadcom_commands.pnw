The Broadcom Commands
=====================

I have decided to break the commands sent to the Broadcom into atomic actions. If they are run separately this will actually make them inefficient time-wise, as you need to put about a half-second pause between each call to the server or it will occasionally not respond, but my guess is that I will not have access to the Broadcom again for a long while and like most things here this will turn into a code-maintenance nightmare. To ameliorate the knowledge-gain, knowledge-lost cycle  I am trying to make the code as simple as possible at the possible expense of execution efficiency. Of course, one could argue that an explosion of classes does not simplify anything but I am hopeful that once the pattern of implementation is recognized only the relevant classes need be found and examined and so smaller will be better.

To allow for the aggregation of commands each command class has an `add` method which will allow other commands to be added to their data-dictionary. This way the `Apply` action only needs to be called once per page. There are too many things on the pages for me to check if they make sense, though, so user-beware.

A hypothetical example::

   connection = HTTPConnection('192.168.1.1', password='admin', path='radio.asp')
   command = Set24GHzChannel(connection)
   other_command = Disable5GHz(connection)
   command += other_command
   command('11')

.. autosummary::
   :toctree: api

   BroadcomBaseCommand

<<name='BroadcomBaseCommand', echo=False>>=
class BroadcomBaseCommand(BaseClass):
    """
    The base-command to hold the data-dict
    """
    __metaclass__ = ABCMeta
    def __init__(self, connection, sleep=0.5):
        """
        Base Command constructor

        :param:

         - `connection`: Connection to the AP
         - `sleep`: seconds to sleep after talking to the AP
        """
        super(BroadcomBaseCommand, self).__init__()
        self._logger = None
        self.connection = connection
        self.sleep = sleep
        self._base_data = None
        self._query = None
        return

    @abstractproperty
    def base_data(self):
        """
        the data-dictionary without the command-specific data
        """
        return

    @abstractproperty
    def query(self):
        """
        A Broadcom Querier
        """
        return
@

.. autosummary::
   :toctree: api

   Base5GHzCommand

<<name='Base5GHzCommand', echo=False>>=
class Base5GHzCommand(BroadcomBaseCommand):
    """
    A base for 5Ghz commands
    """
    def __init__(self, *args, **kwargs):
        super(Base5GHzCommand, self).__init__(*args, **kwargs)
        self._logger = None
        return

    @property
    def base_data(self):
        """
        The data-dict to set the 5ghz interface
        """
        if self._base_data is None:
            self._base_data = action_dict()
            self._base_data[WIRELESS_INTERFACE] = UNIT_5_GHZ
        return self._base_data

    @property
    def query(self):
        """
        a Broadcom5GHz Querier
        """
        if self._query is None:
            self._query = Broadcom5GHzQuerier(connection=self.connection)            
        return self._query
# end class Base5GHzCommand
@
