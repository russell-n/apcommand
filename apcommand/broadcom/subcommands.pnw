The Sub-Commands
================
.. currentmodule:: apcommand.broadcom.subcommands
This module holds the sub-commands for the Arguments (methods that it will call).

The try-except Decorator
------------------------

Since this is a user-level class (it is part of the command-line interface), exceptions are caught and logged, rather than allowing the interpreter to dump the stack-trace (it still logs and displays the stack-trace). To make this simpler a decorator is used to catch `Exception`.

.. autosummary::
   :toctree: api

   try_except
   
<<name='try_except', echo=False>>=
def try_except(func):
    """
    A decorator method to catch Exceptions

    :param:

     - `func`: A function to call
    """
    def wrapped(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as error:
            import traceback
            log = BaseClass()
            log.logger.error(error)
            log.logger.debug(traceback.format_exc())
    return wrapped
@

Class SubCommand
----------------

Role: Holds the sub-commands for the Arguments (the methods to actually call base on what the user passed in).

Collaborators:

   * Broadcom 

.. uml::

   SubCommand o- Broadcom

.. autosummary::
   :toctree: api

   SubCommand -|> BaseClass
   SubCommand.access_point
   SubCommand.status
   SubCommand.reset
   SubCommand.channel
   SubCommand.ssid
   SubCommand.security
   SubCommand.command
   SubCommand.ipaddress

<<name='imports', echo=False>>=
# this package
from apcommand.baseclass import BaseClass
import apcommand.accesspoints.broadcom.broadcom
from apcommand.commons.errors import ArgumentError
@
<<name='SubCommand', echo=False>>=
class SubCommand(BaseClass):
    """
    A holder of sub-commands
    """
    def __init__(self):
        """
        SubCommand Constructor
        """
        super(SubCommand, self).__init__()
        return

    def access_point(self, args):
        '''
        The Access point controller

        :return: AP Controller
        '''
        # assume that the accesspoint class has valuable defaults
        # only pass in parameters that have been set by the arguments
        apargs = ('hostname', 'username', 'password', 'sleep')
        apvalues = (getattr(args, arg) for arg in apargs if getattr(args, arg) is not None)
        apkeys = (arg for arg in apargs if getattr(args, arg) is not None)
        apkwargs = dict(zip(apkeys, apvalues))
        
        ap = apcommand.accesspoints.broadcom.broadcom.BroadcomBCM94718NR(**apkwargs)
        return ap


    @try_except
    def status(self, args):
        """
        Calls the access-point control's status method

        :param:

         - `args`: namespace with 'interface' attribute
        """
        ap = self.access_point(args)
        ap.status(args.interface)
        return

    @try_except
    def channel(self, args):
        """
        Calls the access point's set_channel method (unless channel not set, then get_channel)

        :param:

         - `args`: namespace with `channel` attribute
        """
        ap = self.access_point(args)
        if args.channel is None:
            out_string = "{0} GHz Channel: {1} {3} ({2})"
            for band in '2.4 5'.split():
                print "{0} GHz:".format(band)
                key = band[0]
                # because there's a sleep between the web-calls this is slow
                # so it prints after every line to give some feedback
                channel = ap.query[key].channel
                print "   Channel: {0}".format(channel)
                state = ap.query[key].state
                print "  {0}".format(state)
                sideband = ap.query[key].sideband
                if sideband is None:
                    sideband = ''
                print '   {0}'.format(sideband)

                self.logger.debug(out_string.format(band, channel, state, sideband))
        else:
            ap.set_channel(channel=args.channel)
        return

    @try_except
    def ssid(self, args):
        """
        Calls the access point's set_ssid method

        :param:

         - `args`: namespace with `band` and `ssid` attributes
        """
        ap = self.access_point(args)

        ap.set_ssid(ssid=args.ssid, band=args.band)
        return

    @try_except
    def security(self, args):
        """
        calls the AP's set_security method

        :param:

         - `args`: namespace with `type` attribute
        """
        ap = self.access_point(args)
        ap.set_security(security_type=args.type)
        return

    @try_except
    def command(self, args):
        """
        Calls the AP's exec_command method

        :param:

         - `args`: namespace with `command` attribute
        """
        ap = self.access_point(args)
        ap.exec_command(args.command)
        return

    @try_except
    def ipaddress(self, args):
        """
        Sets the AP's ip address

        :param:

         - `args`: namespace with `ipaddress`, `subnetmask` attributes
        """
        ap = self.access_point(args)
        ap.set_ip(address=args.ipaddress,
                  mask=args.subnetmask)
        return

    @try_except
    def enable(self, args):
        """
        Enables an AP interface

        :param:

         - `args`: namespace with `interface` attribute
        """
        ap = self.access_point(args)
        ap.enable(interface=interface)
        return
        
@


Testing The SubCommand
----------------------

The sub-command is largely ignorant of what the objects it holds does so this is mainly to check that the methods exist and if called will catch exceptions.

.. autosummary::
   :toctree: api

   TestSubCommand.test_up
   TestSubCommand.test_down
   TestSubCommand.test_destroy
   TestSubCommand.test_args
   TestSubCommand.test_status
   TestSubCommand.test_security

<<name='test_imports', echo=False>>=
# python standard library
import unittest
# third-party
from mock import MagicMock, patch
@
<<name='TestSubCommand', echo=False>>=
class TestSubCommand(unittest.TestCase):
    def setUp(self):
        self.logger = MagicMock()
        self.sub_command = SubCommand()
        self.sub_command._logger = self.logger
        return

    def test_channel(self):
        """
        Does the set_channel method get called correctly?
        """
        args = MagicMock()
        args.channel = '1'
        args.mode = '11NG'
        args.bandwidth='HT20'
        ap_channel = MagicMock()
        ap_instance = MagicMock()
        ap_channel.AtherosAR5KAP.return_value = ap_instance
        error_message = 'channel setting error'
        ap_instance.set_channel.side_effect = Exception(error_message)
        with patch('apcommand.accesspoints.atheros', ap_channel):
            self.sub_command.channel(args)
            ap_instance.set_channel.assert_called_with(channel=args.channel, mode=args.mode,
                                                       bandwidth=args.bandwidth)
        return

@
<%
for case in (TestSubCommand,):
    suite = unittest.TestLoader().loadTestsFromTestCase(case)    
    unittest.TextTestRunner(verbosity=2).run(suite)
%>


